%clear;
clc;
%D:\GitHub\NeuralNetMatlab
% function to train network with MNIST data set
% requires 8+ GB of ram depending on how many example you train at once
%tic

format
trainImages = [-1,-1,-1,-1;...
               -1,-1,-1, 1;...
               -1,-1, 1,-1;...
               -1,-1, 1, 1;...
               -1, 1,-1,-1;...
               -1, 1,-1, 1;...
               -1, 1, 1,-1;...
               -1, 1, 1, 1;...
                1,-1,-1,-1;...
                1,-1,-1, 1;...
                1,-1, 1,-1;...
                1,-1, 1, 1;...
                1, 1,-1,-1;...
                1, 1,-1, 1;...
                1, 1, 1,-1;...
                1, 1, 1, 1]';
trainLabels = categorical([0,...
                           1,...
                           1,...
                           2,...
                           1,...
                           2,...
                           2,...
                           3,...
                           1,...
                           2,...
                           2,...
                           3,...
                           2,...
                           3,...
                           3,...
                           4]');
testImages =  [-1,-1,-1,-1;...
               -1,-1,-1, 1;...
               -1,-1, 1,-1;...
               -1,-1, 1, 1;...
               -1, 1,-1,-1;...
               -1, 1,-1, 1;...
               -1, 1, 1,-1;...
               -1, 1, 1, 1;...
                1,-1,-1,-1;...
                1,-1,-1, 1;...
                1,-1, 1,-1;...
                1,-1, 1, 1;...
                1, 1,-1,-1;...
                1, 1,-1, 1;...
                1, 1, 1,-1;...
                1, 1, 1, 1]';
testLabels =  categorical([0,...
                           1,...
                           1,...
                           2,...
                           1,...
                           2,...
                           2,...
                           3,...
                           1,...
                           2,...
                           2,...
                           3,...
                           2,...
                           3,...
                           3,...
                           4]');

% trainImages = [-1,-1;...
%                -1, 1;...
%                 1,-1;...
%                 1, 1]';
% trainLabels = categorical([0,...
%                            1,...
%                            1,...
%                            0]');
% testImages =  [-1,-1;...
%                -1, 1;...
%                 1,-1;...
%                 1, 1]';
% testLabels =  categorical([0,...
%                            1,...
%                            1,...
%                            0]');

LR = 0.01;
M1 = 0.9;
M2 = 0.999;
miniBatchSize = 4;
Gens = 200;
P1 = 0.05;
P2 = 0.05;
P3 = 0.05;
P4 = 0.05;
Pop = 200;
Outs = 5;
Ins = size(trainImages,1);
maxEpochs = 100*Pop*miniBatchSize/size(testImages,2);


% rng(1345487458);
%build structure
Layers = {vectorInputLayer(Ins),...
          parallelLayer({evolveLayer(Outs, Pop, P1, P2, P3, P4, Gens, [3,3],[2,2],1),evolveLayer(Outs, Pop, P1, P2, P3, P4, Gens, [3,3], [2,2], 2)}),...
          concatLayer(2,1),...
          fullyConnectedLayer(5),...
          softmaxLayer(),...
          classificationOutputLayer(Pop)
          };
%initialize network
NN1 = neuralNet(Layers,1);
NN1.setCats(categorical({'0','1','2','3','4'}));
NN1.trainNetwork(trainImages,trainLabels,testImages,testLabels,LR,M1,M2,maxEpochs,miniBatchSize)
% 
% 
% rng(1345487458);
% %build structure
% Layers = {vectorInputLayer(4),...
%           evolveLayer(10, 50, 0.05, 0.0, 0.05, 0.05, 100, 1),...
%           evolveLayer(5, 50, 0.05, 0.0, 0.05, 0.05, 100, 1),...
%           softmaxLayer(),...
%           classificationOutputLayer(50*50)
%           };
% %initialize network
% NN2 = neuralNet(Layers,1);
% NN2.setCats(categorical({'0','1','2','3','4'}));
% NN2.trainNetwork(trainImages,trainLabels,testImages,testLabels,LR,M1,M2,maxEpochs,miniBatchSize)

maxEpochs = 400*miniBatchSize/size(testImages,2);

% build structure
Layers2 = {vectorInputLayer(Ins),...
           parallelLayer({ Layers{2}.Layers{1}.getBest(1), Layers{2}.Layers{2}.getBest(1)}),...
           concatLayer(2,1),...
           fullyConnectedLayer(5),...
           softmaxLayer(),...
           classificationOutputLayer(1)
          };
      
%initialize network
NN2 = neuralNet(Layers2,1);
NN2.setCats(categorical({'0','1','2','3','4'}));
NN2.trainNetwork(trainImages,trainLabels,testImages,testLabels,LR,M1,M2,maxEpochs,miniBatchSize)
NN2.feedForward(testImages)
full(Layers2{2}.Gene)

% rng(1345487458);
% %build structure
% Layers = {vectorInputLayer([3,8]),...
%           evolveLayer(2, 100, 0.05, 0.05, 0.05, 0.05, 100, 2),...
%           reLuLayer()...
%           softmaxLayer(),...
%           classificationOutputLayer(100)
%           };
% %initialize network
% NN2 = neuralNet(Layers,2);
% NN2.setCats(categorical({'0','1'}));
% NN2.trainNetwork(trainImages,trainLabels,testImages,testLabels,LR,M1,M2,maxEpochs,miniBatchSize)
% 
% rng(1345487458);
% %build structure
% Layers = {vectorInputLayer([3,8]),...
%           evolveLayer(2, 100, 0.05, 0.05, 0.05, 0.05, 100, 3),...
%           reLuLayer()...
%           softmaxLayer(),...
%           classificationOutputLayer(100)
%           };
% %initialize network
% NN3 = neuralNet(Layers,3);
% NN3.setCats(categorical({'0','1'}));
% NN3.trainNetwork(trainImages,trainLabels,testImages,testLabels,LR,M1,M2,maxEpochs,miniBatchSize)
% 
% rng(1345487458);
% %build structure
% Layers = {vectorInputLayer([3,8]),...
%           evolveLayer(2, 100, 0.05, 0.05, 0.05, 0.05, 100, 4),...
%           reLuLayer()...
%           softmaxLayer(),...
%           classificationOutputLayer(100)
%           };
% %initialize network
% NN4 = neuralNet(Layers,4);
% NN4.setCats(categorical({'0','1'}));
% NN4.trainNetwork(trainImages,trainLabels,testImages,testLabels,LR,M1,M2,maxEpochs,miniBatchSize)